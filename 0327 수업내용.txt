<Day16>
4/4 (금) 2시  3시간정도

심볼스터디룸 예정



<<<에러와 예외>>>

-에러(Error) : 프로그램 오류 또는 시스템 문제로 발생하는 예외   ex) 코드 잘못 친 경우, 개발자가 처리해야함
-예외(Exception) : 사용자의 입력 오류에 따라 발생하는 예외   ex) 예측하지 못한 상황, 사용자에 의한 경우

예외클래스  BaseException : 최상위 예외 클래스
                 Exception: 대부분 예외 클래스의 슈퍼 클래스

*예외처리
: 프로그램이 실행될 때 발생될 에러를 미리 예측하고 처리해 주는 것



<<<try-except>>>

try:

  #에러가 발생할 수 있는 코드 블록

except:

  #예외가 발생했을 때 수행되는 코드 블록


<<<try-except[발생 예외]>>>
try:

  #에러가 발생할 수 있는 코드 블록

except[발생예외1]:

  #발생 예외1에 해당하면 수행되는 코드 블록

except[발생예외2]:

  #발생 예외2에 해당하면 수행되는 코드 블록


<<<try-except[발생 예외] as 예외 메시지 변수>>>
try:

  #에러가 발생할 수 있는 코드 블록

except[발생예외1] as 변수1:                             변수- 에러일 때 콘솔에 나오는 메시지를 의미

  #발생 예외1에 해당하면 수행되는 코드 블록

except[발생예외2] as 변수2:

  #발생 예외2에 해당하면 수행되는 코드 블록


<<<try-finally, else>>>

try:

  #에러가 발생할 수 있는 코드 블록

except:

  #발생 예외1에 해당하면 수행되는 코드 블록

finally: 
  #예외 발생과 상관없이 항상 실행되는 블록  ->try, except 과정을 다 거침


<<<try-else>>>
try:

  #에러가 발생할 수 있는 코드 블록

except:

  #발생 예외1에 해당하면 수행되는 코드 블록

else: 
  #정상적으로 실행되면 수행되는 코드 블록


->finally는 에러 발생과 상관없이(있든, 없든) 
   else 는 에러 없고 정상적일 때 실행





<<<커스텀 예외 클래스>>>

try:
 #에러가 발생할 수 있는 코드 블록
 if 에러가 발생할 조건:
   raise Exception("에러 메시지")       if조건을 만족하면 exception(에러메시지)를 띄우도록 하는 것 -> raise

except Exception as e:                                -> print(e) 하면 e =  예외메시지 가 출력됨
 #예외가 발생했을 때 수행되는 코드 블록

else: 
 #정상적으로 실행되면 수행되는 코드
finally:
 #예외 발생과 상관없이 항상 실행되는 블록



*****************************************
class 예외 클래스명(Exception)
  def __init__(self):                         -> 예외 클래스는 생성자 무조건 필요, 에러메시지를 속성으로 정의
    super().__init__("에러 메시지")


*Exception 클래스 상속
-예외 클래스는 Exception 클래스를 상속받아 생성해야 한다.

*생성자 구현
-예외 클래스에는 __init__() 메소드가 정의되어야 한다.

*예외 메시지 전달
-생성자에서는 예외 메시지를 생성하여 super() 함수, 즉 Exception 클래스의 생성자로 전달해야 한다.


*******************************************************
class ExError(Exception):
  def __init__(self):                           -> 예외 클래스는 생성자 무조건 필요, 에러메시지를 속성으로 정의
    super().__init__("에러뜸")


try:
 #에러가 발생할 수 있는 코드 블록
 if 에러가 발생할 조건:
   raise ExError                                  ->  if조건을 만족하면 ExError를 띄우도록 하는 것  -> raise

except Exception as e:                                -> print(e) 하면 "에러뜸"이라는 메시지가 뜸
 #예외가 발생했을 때 수행되는 코드 블록

else: 
 #정상적으로 실행되면 수행되는 코드
finally:
 #예외 발생과 상관없이 항상 실행되는 블록





